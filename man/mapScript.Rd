% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mapScript.R
\name{mapScript}
\alias{mapScript}
\title{Extract tagged input and output paths from a script.}
\usage{
mapScript(script_path, input_tag = "#input", output_tag = "#output")
}
\arguments{
\item{script_path}{The path to the target script as a character string.}

\item{input_tag}{A character tag for input paths within the target script.}

\item{output_tag}{A character tag for output paths within the target script.}
}
\value{
A data frame containing the following columns describing the target
script's input and and output paths.

\item{line}{integer. The line the path is present on within the script.}
\item{direction}{character. Values are either "in" or "out" to differentiate input or output files.}
\item{script_directory}{character. The path to the script's directory.}
\item{script_basename}{character. The script's basename.}
\item{file_directory}{character. The path to the input or output file's directory.}
\item{file_basename}{character. The input or output file's basename.}
\item{file}{character. The input or output file's full path.}
\item{script}{character. The script's full path.}
}
\description{
mapScript() extracts tagged input and output paths from a script. The target script is
read into memory and queried for the user-specified input and output tags.
Character strings on these tagged lines are assumed to be file paths, are
extracted, split into their respective directory paths (\code{\link[=dirname]{dirname()}}) and base
names (\code{\link[=basename]{basename()}}), then compiled into a data frame as detailed below.
}
\examples{
example_script_path <-
  system.file("dummy_pipeline/01_load_data.R",
              package = "pipelinemapper")

mapScript(example_script_path,
          input_tag = "#input",
          output_tag = "#output")

}
